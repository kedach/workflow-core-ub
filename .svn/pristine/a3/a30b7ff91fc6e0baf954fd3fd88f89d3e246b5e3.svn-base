using System;
using System.Collections.Generic;
using System.Text;
using WorkflowCore.Extention.TOA;
using WorkflowCore.Interface;
using WorkflowCore.Models;
using WorkflowCore.Sample_TOA.Rules;
using WorkflowCore.Users.Models;

namespace WorkflowCore.Extention.Primitives.TOA
{
    public class DestStepBody : UBStepBody
    {
        public const string ExtAssignPrincipal = "AssignedPrincipal";
        public const string ExtUserOptions = "UserOptions";
        private readonly Dictionary<string, string> _options;
        public DestStepBody(Dictionary<string, string> options)
        {
            _options = options;
        }
        public override ExecutionResult Run(IStepExecutionContext context)
        {
            //持久化并等待事件
            if (!context.ExecutionPointer.EventPublished)
            {
                string dest = context.ExecutionPointer.ContextItem?.ToString();

                //审批人
                context.ExecutionPointer.ExtensionAttributes[ExtAssignPrincipal] = dest;
                //审批意见列表
                context.ExecutionPointer.ExtensionAttributes[ExtUserOptions] = _options;

                ClientEventRule cr = new ClientEventRule();
                cr.Run(this.GetContext()); 
                var effectiveDate = DateTime.Now.ToUniversalTime();
                var eventKey = context.Workflow.Id + "." + context.ExecutionPointer.Id;
                //岗位加人员
                string eventName = "job-dest";
;
                return ExecutionResult.WaitForEvent(eventName, eventKey, effectiveDate);
            }

            if (!(context.ExecutionPointer.EventData is UserAction))
                throw new ArgumentException();
            //时间发布后的执行 即doaction的操作
            var action = ((UserAction)context.ExecutionPointer.EventData);

            //
            string jobId = "";
            this.GetContextItem(jobId);
            //if (context.PersistenceData == null)
            //{
            //    var result = ExecutionResult.Branch(new List<object>() { context.Item }, new ControlPersistenceData() { ChildrenActive = true });
            //    result.OutcomeValue = action.OutcomeValue;
            //    return result;
            //}

            //if ((context.PersistenceData is ControlPersistenceData) && ((context.PersistenceData as ControlPersistenceData).ChildrenActive))
            //{
            //    if (context.Workflow.IsBranchComplete(context.ExecutionPointer.Id))
            //        return ExecutionResult.Next();
            //    else
            //    {
            //        var result = ExecutionResult.Persist(context.PersistenceData);
            //        result.OutcomeValue = action.OutcomeValue;
            //        return result;
            //    }
            //}

            //throw new ArgumentException("PersistenceData");

            //return ExecutionResult.Outcome(action.OutcomeValue);

            return ExecutionResult.Next();
        }
    }
}
